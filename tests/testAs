#!/bin/bash

function testAsMember() {
  INSTANCE_ID="i-aaaaaaaa"
  assertTrue "instance is an healthy member of as" "elbMember"

  INSTANCE_ID="i-bbbbbbbb"
  assertTrue "instance is an unhealthy member of as" "elbMember"

  INSTANCE_ID="i-ffffffff"
  assertFalse "instance is not member of as" "elbMember"

  INSTANCE_ID=""
  assertFalse "instance doesn't know who it is" "elbMember"
}

function testAsCountInstances() {
  assertEquals "count instances" "6" `asCountInstances`
}

function testAsCountHealthyInstances() {
  assertEquals "count healthy instances" "3" `asCountHealthyInstances`
}

function testAsCountPendingInstances() {
  assertEquals "count pending instances" "1" `asCountPendingInstances`
}

function testAsCountTerminatingInstances() {
  assertEquals "count terminating instances" "1" `asCountTerminatingInstances`
}

function testAsPrimeData() {
  AS_TMP_FILE=`mktemp -t terminate_test_as.XXXXXXXX`

  unset AS
  assertFalse "return false if \$AS is unset" "asPrimeData"

  AS="something_unknown"
  assertFalse "return false if \$AS is unknown" "asPrimeData"
  assertEquals "Not an autoscaling group" "No AutoScalingGroups found" "`cat $AS_TMP_FILE`"
  rm -f $AS_TMP_FILE

  unset AS_TMP_FILE
  assertFalse "return false if \$AS_TMP_FILE is unset" "asPrimeData"
}

function testAsContainsInstance() {
  assertTrue "test healthy instance" "asContainsInstance i-aaaaaaaa"
  assertTrue "test unhealthy instance" "asContainsInstance i-bbbbbbbb"
  assertTrue "test pending instance" "asContainsInstance i-eeeeeeee"
  assertTrue "test terminating instance" "asContainsInstance i-ffffffff"
  assertFalse "test non-existant instance" "asContainsInstance i-00000000"
}

function testAsAddInstance() {
  assertTrue "Add an instance" "asAddInstance"
  SPUN_NEW_INSTANCE='true'
  assertFalse "Add another instance" "asAddInstance"
}

function oneTimeSetUp() {
  # load include to test
  source ../lib/elb.inc
  source ../lib/as.inc
  source ../lib/system.inc
}

function setUp() {
  AS="my-as-group"
  ELB="FAKEELB"
  DRY_RUN="true"
  AS_TMP_FILE=`mktemp -t terminate_test_as.XXXXXXXX`
  ELB_TMP_FILE=`mktemp -t terminate_test_elb.XXXXXXXX`

  # PRIME THE AS_TMP_FILE
  cat > $AS_TMP_FILE <<EOF
AUTO-SCALING-GROUP  my-as-group  my-current-launch-config  eu-west-1a,eu-west-1c  whatever-this-is  2  8  4
INSTANCE  i-aaaaaaaa  eu-west-1a  InService  Healthy  my-current-launch-config
INSTANCE  i-bbbbbbbb  eu-west-1c  InService  Unhealthy  my-current-launch-config
INSTANCE  i-cccccccc  eu-west-1c  InService  Healthy  my-current-launch-config
INSTANCE  i-dddddddd  eu-west-1c  InService  Healthy  my-old-launch-config
INSTANCE  i-eeeeeeee  eu-west-1c  InService  Pending  my-old-launch-config
INSTANCE  i-ffffffff  eu-west-1c  InService  Terminating  my-old-launch-config
EOF

  # PRIME THE ELB_TMP_FILE
  cat > $ELB_TMP_FILE <<EOF
INSTANCE_ID  i-aaaaaaaa  InService  N/A  N/A
INSTANCE_ID  i-bbbbbbbb  OutOfService  N/A  N/A
INSTANCE_ID  i-cccccccc  InService  N/A  N/A
INSTANCE_ID  i-dddddddd  InService  N/A  N/A
EOF
}

function TearDown() {
  rm -f $AS_TMP_FILE $ELB_TMP_FILE
}

# load and run shUnit2
source ./shunit/src/shunit2

# vim: ai ts=2 sw=2 et sts=2 ft=sh
