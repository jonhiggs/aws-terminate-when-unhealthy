#!/bin/bash

#function testSystemIsEc2() {
#  # one of these two tests will fail.
#  assertFalse "system isn't an ec2 instance" "systemIsEc2"
#  assertTrue "system is an ec2 instance" "systemIsEc2"
#}

function testSystemGetMeta() {
  if systemIsEc2; then
    assertTrue "when there is no instance id, it should get one" "systemGetMeta instance-id"
    INSTANCE_ID=`systemGetMeta instance-id`
  else
    INSTANCE_ID="i-ffffffff"
  fi

  assertTrue "should get instance-id of ec2 instance" "systemGetMeta instance-id"
  assertTrue "should be an instance id" "echo $INSTANCE_ID | egrep '^i-[0-9a-f]{8}$'"
}

function testSystemCleanUp() {
  systemCleanUp
  assertFalse "ELB_TMP_FILE should be deleted" "[ -f $ELB_TMP_FILE ]"
  assertFalse "AS_TMP_FILE should be deleted" "[ -f $AS_TMP_FILE ]"
}

function testSystemError() {
  assertFalse "Error should return 1 if no message" "systemError"
  assertEquals "Error should say something" "rar" `systemError "rar"`
}

function testSystemInfo() {
  assertFalse "Test no info message" "systemInfo"

  INFO=""
  assertTrue "Test an info message with no INFO var" "systemInfo rar"

  INFO="true"
  assertTrue "Test an info message with INFO var" "systemInfo rar"
  assertEquals "Info. Talk!" "rar" `systemInfo "rar"`

  INFO="false"
  assertTrue "Test an info message with INFO var" "systemInfo rar"
}

function testSystemCreateLock() {
  touch $LOCK_FILE
  START_TIME=$(( `date +%s` + ( $OUT_OF_SERVICE_THRESHOLD * 2 ) + 300 ))
  assertTrue "lock exists and is too old" "systemCreateLock"

  touch $LOCK_FILE
  START_TIME=$(( `date +%s` + ( $OUT_OF_SERVICE_THRESHOLD * 2 ) - 300 ))
  assertFalse "lock exists but isn't yet old" "systemCreateLock"

  rm $LOCK_FILE
  assertTrue "lock doesn't exist" "systemCreateLock"
}

function testSystemRemoveLock() {
  touch $LOCK_FILE
  assertTrue "Lock should exist" "[ -f $LOCK_FILE ]"
  systemRemoveLock
  assertFalse "Lock shouldn't exist" "[ -f $LOCK_FILE ]"
}

function testSystemLocked() {
  rm -f $LOCK_FILE
  assertFalse "Lock should not exist" "systemLocked"
  touch $LOCK_FILE
  assertTrue "Lock should exist" "systemLocked"
}

function testSystemLockedTooLog() {
  touch $LOCK_FILE
  START_TIME=`date +%s`
  systemLockedTooLong
  assertFalse "locked now" "systemLockedTooLong"

  START_TIME=$(( `date +%s` + ( $OUT_OF_SERVICE_THRESHOLD * 2 ) - 300 ))
  assertFalse "locked less than threshold" "systemLockedTooLong"

  START_TIME=$(( `date +%s` + ( $OUT_OF_SERVICE_THRESHOLD * 2 ) + 300 ))
  assertTrue "locked longer than threshold" "systemLockedTooLong"
}

function testSystemCheckVariableSet() {
  assertFalse "Check for unset variable" "systemCheckVaribleSet BLAH"
  #assertTrue "Check error message" "systemCheckVariableSet BLAH | egrep 'You need to set'"
  
  BLAH="single"
  assertTrue "Check for set single-word variable" "systemCheckVariableSet BLAH"
  BLAH="now i'm set"
  assertTrue "Check for set multi-word variable" "systemCheckVariableSet BLAH"
}

function oneTimeSetUp() {
  # load include to test
  source ../lib/system.inc
  ELB_TMP_FILE=`mktemp -t XXXXXX`
  AS_TMP_FILE=`mktemp -t XXXXXX`
  LOCK_FILE=`mktemp -t XXXXXX`
  OUT_OF_SERVICE_THRESHOLD=1800
  unset BLAH
  BLAH="whatever"
}

function setUp() {
  unset IS_EC2
  unset INSTANCE_ID
  unset AMI_ID
  START_TIME=`date +%s`
}

function tearDown() {
  rm -f /var/lock/aws-terminate-when-unhealthy
}

oneTimeTearDown() {
  rm -f $ELB_TMP_FILE $AS_TMP_FILE $LOCK_FILE
}

# load and run shUnit2
source ./shunit/src/shunit2

# vim: ai ts=2 sw=2 et sts=2 ft=sh
