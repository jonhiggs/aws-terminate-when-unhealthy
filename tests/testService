#!/bin/bash
function testServiceOutOfService() {
  assertFalse "service should be online" "serviceOutOfService"

  START_TIME=$(($START_TIME - $OUT_OF_SERVICE_THRESHOLD - 10))
  assertTrue "service should be offline" "serviceOutOfService"
}

function testServiceRetryInterval() {
  OUT_OF_SERVICE_PRECAUTION_THRESHOLD=8
  assertEquals "Calculate the retry for $OUT_OF_SERVICE_PRECAUTION_THRESHOLD." "2" `serviceRetryInterval`

  OUT_OF_SERVICE_PRECAUTION_THRESHOLD=300
  assertEquals "Calculate the retry for $OUT_OF_SERVICE_PRECAUTION_THRESHOLD." "75" `serviceRetryInterval`

  OUT_OF_SERVICE_PRECAUTION_THRESHOLD=1200
  assertEquals "Calculate the retry for $OUT_OF_SERVICE_PRECAUTION_THRESHOLD." "300" `serviceRetryInterval`
}

function testServiceMaybeOutOfService() {
  assertFalse "everything is fine and dandy. do nothing" "serviceMaybeOutOfService"

  START_TIME=$(($START_TIME - $OUT_OF_SERVICE_PRECAUTION_THRESHOLD - 10))
  assertTrue "should spin up another instance as a precaution" "serviceMaybeOutOfService"
}

function oneTimeSetUp() {
  # load include to test
  source ../lib/service.inc
  source ../lib/system.inc
  SERVICE_FILE=`mktemp -t terminate_test_service.XXXXXXXX`
}

function setUp() {
  OUT_OF_SERVICE_THRESHOLD=300
  OUT_OF_SERVICE_PRECAUTION_THRESHOLD=60
  START_TIME=`date +%s`
}

function oneTimeTearDown() {
  rm -f $TMP_FILE
}

# load and run shUnit2
source ./shunit/src/shunit2

# vim: ai ts=2 sw=2 et sts=2 ft=sh
