#! /bin/sh

testElbMember() {
  INSTANCE_ID="i-aaaaaaaa"
  assertTrue "instance is an inservice member of elb" "elbMember"

  INSTANCE_ID="i-bbbbbbbb"
  assertTrue "instance is an outofservice member of elb" "elbMember"

  INSTANCE_ID="i-ffffffff"
  assertFalse "instance is not member of elb" "elbMember"

  INSTANCE_ID=""
  assertFalse "instance doesn't know who it is" "elbMember"
}

testElbOutOfService() {
  INSTANCE_ID="i-aaaaaaaa"
  assertFalse "instance is in service" "elbOutOfService"

  INSTANCE_ID="i-bbbbbbbb"
  assertTrue "instance is out of service" "elbOutOfService"

  INSTANCE_ID="i-ffffffff"
  assertFalse "instance is not member of elb" "elbOutOfService"

  INSTANCE_ID=""
  assertFalse "instance doesn't know who it is" "elbOutOfService"
}

testElbPrimeData() {
  ELB_TMP_FILE2=$ELB_TMP_FILE
  unset ELB_TMP_FILE
  assertFalse "return false if \$TMP_DATA is unset" `elbPrimeData`
  ELB_TMP_FILE=$ELB_TMP_FILE2

  ELB2=$ELB
  unset ELB
  assertFalse "return false if \$ELB is unset" `elbPrimeData`
  ELB=$ELB2
}

testElbCountInstances() {
  assertEquals "count instances" "4" `elbCountInstances`
}

testElbCountHealthyInstances() {
  assertEquals "count healthy instances" "3" `elbCountHealthyInstances`
}

oneTimeSetUp() {
  # load include to test
  . ../lib/elb.inc
  ELB="FAKEELB"
  ELB_TMP_FILE=`mktemp -t terminate_test_elb`

  # PRIME THE ELB_TMP_FILE
  cat > $ELB_TMP_FILE <<EOF
INSTANCE_ID  i-aaaaaaaa  InService  N/A  N/A
INSTANCE_ID  i-bbbbbbbb  OutOfService  N/A  N/A
INSTANCE_ID  i-cccccccc  InService  N/A  N/A
INSTANCE_ID  i-dddddddd  InService  N/A  N/A
EOF

}

oneTimeTearDown() {
  rm -f $ELB_TMP_FILE
}

# load and run shUnit2
. ./shunit/src/shunit2

# vim: ai ts=2 sw=2 et sts=2 ft=sh
